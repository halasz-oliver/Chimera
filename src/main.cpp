#include "chimera/client.hpp"
#include <iostream>
#include <fstream>
#include <string>

// TODO: proper CLI parsing library (argparse vagy hasonl√≥)
// TODO: config file support (JSON/YAML)

void print_usage(const char* program_name) {
    std::cout << "Haszn√°lat: " << program_name << " [opci√≥k] [√ºzenet_f√°jl]\n";
    std::cout << "Opci√≥k:\n";
    std::cout << "  -s, --server <ip>     DNS server c√≠me (default: 8.8.8.8)\n";
    std::cout << "  -p, --port <port>     DNS server portja (default: 53)\n";
    std::cout << "  -d, --domain <domain> Target domain (default: example.com)\n";
    std::cout << "  -t, --timeout <ms>    Timeout milliszekundumban (default: 5000)\n";
    std::cout << "  -h, --help           Ez a s√∫g√≥\n";
    std::cout << "\nP√©ld√°k:\n";
    std::cout << "  " << program_name << " message.txt\n";
    std::cout << "  " << program_name << " -s 1.1.1.1 -d test.com message.txt\n";
}

int main(int argc, char** argv) {
    chimera::ClientConfig config;
    std::string message = "Hello from Chimera! ü¶é"; // emoji mert mi√©rt ne

    // Nagyon primit√≠v argument parsing
    // TODO: ezt ki kell v√°ltani egy rendes library-vel
    for (int i = 1; i < argc; ++i) {
        std::string arg = argv[i];

        if (arg == "-h" || arg == "--help") {
            print_usage(argv[0]);
            return 0;
        } else if (arg == "-s" || arg == "--server") {
            if (i + 1 < argc) {
                config.dns_server = argv[++i];
            } else {
                std::cerr << "Hi√°nyz√≥ DNS server c√≠m\n";
                return 1;
            }
        } else if (arg == "-p" || arg == "--port") {
            if (i + 1 < argc) {
                config.dns_port = static_cast<uint16_t>(std::stoi(argv[++i]));
            } else {
                std::cerr << "Hi√°nyz√≥ port sz√°m\n";
                return 1;
            }
        } else if (arg == "-d" || arg == "--domain") {
            if (i + 1 < argc) {
                config.target_domain = argv[++i];
            } else {
                std::cerr << "Hi√°nyz√≥ target domain\n";
                return 1;
            }
        } else if (arg == "-t" || arg == "--timeout") {
            if (i + 1 < argc) {
                config.timeout = std::chrono::milliseconds(std::stoi(argv[++i]));
            } else {
                std::cerr << "Hi√°nyz√≥ timeout √©rt√©k\n";
                return 1;
            }
        } else if (arg[0] != '-') {
            // F√°jln√©v
            std::ifstream file(arg);
            if (file.is_open()) {
                std::string line;
                message.clear();
                while (std::getline(file, line)) {
                    if (!message.empty()) message += "\n";
                    message += line;
                }
                file.close();
                std::cout << "√úzenet bet√∂ltve f√°jlb√≥l: " << arg << std::endl;
            } else {
                std::cerr << "Nem siker√ºlt megnyitni a f√°jlt: " << arg << std::endl;
                return 1;
            }
        } else {
            std::cerr << "Ismeretlen opci√≥: " << arg << std::endl;
            print_usage(argv[0]);
            return 1;
        }
    }

    std::cout << "=== CHIMERA DNS Steganography Client ===" << std::endl;
    std::cout << "DNS Server: " << config.dns_server << ":" << config.dns_port << std::endl;
    std::cout << "Target Domain: " << config.target_domain << std::endl;
    std::cout << "Timeout: " << config.timeout.count() << "ms" << std::endl;
    std::cout << "√úzenet hossza: " << message.size() << " karakter" << std::endl;
    std::cout << "=========================================" << std::endl;

    // Client l√©trehoz√°s √©s √ºzenet k√ºld√©s
    chimera::ChimeraClient client(config);

    // Ping teszt
    std::cout << "\nDNS server ping teszt..." << std::endl;
    auto ping_result = client.ping_dns_server();
    if (ping_result) {
        std::cout << "Ping sikeres: " << ping_result.value().count() << "ms" << std::endl;
    } else {
        std::cout << "Ping sikertelen, de pr√≥b√°ljuk az √ºzenet k√ºld√©st..." << std::endl;
    }

    // √úzenet k√ºld√©s
    std::cout << "\n√úzenet k√ºld√©se..." << std::endl;
    auto result = client.send_text(message);

    if (result) {
        const auto& send_result = result.value();
        std::cout << "\nSikeres k√ºld√©s!" << std::endl;
        std::cout << "Elk√ºld√∂tt b√°jtok: " << send_result.bytes_sent << std::endl;
        std::cout << "Latencia: " << send_result.latency.count() << "ms" << std::endl;
        std::cout << "Haszn√°lt domain: " << send_result.used_domain << std::endl;
        return 0;
    } else {
        std::cout << "\nK√ºld√©si hiba!" << std::endl;
        // TODO: r√©szletes hibak√≥d ki√≠r√°s
        return 1;
    }
}
